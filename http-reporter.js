!function (e, o) { "object" == typeof exports && "object" == typeof module ? module.exports = o() : "function" == typeof define && define.amd ? define([], o) : "object" == typeof exports ? exports.httpReporter = o() : e.httpReporter = o() }(this, (() => (() => { "use strict"; var e = { d: (o, t) => { for (var n in t) e.o(t, n) && !e.o(o, n) && Object.defineProperty(o, n, { enumerable: !0, get: t[n] }) }, o: (e, o) => Object.prototype.hasOwnProperty.call(e, o), r: e => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) } }, o = {}; function t(e) { try { var o = window.uptimeSentinelProjectId; console.log("Project ID: ", o), fetch("https://app.notloading.io/api/alert", { method: "POST", headers: { "project-id": o }, body: JSON.stringify({ error: e }) }).then((function (e) { console.log("response: ", e.json()) })) } catch (e) { console.error("Error sending error report: ", e) } } function n(e) { if ("undefined" != typeof window) { if (window.addEventListener("error", (function (e) { console.log("REPORTER: App error:", e) })), window.fetch) { var o = window.fetch; window.fetch = function () { for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)n[r] = arguments[r]; return o.apply(this, n).then((function (e) { return e.ok || (console.log("REPORTER: Fetch error:", e), t(e)), e })).catch((function (e) { throw console.log("REPORTER: Fetch error:", e), t(e), e })) } } if (window.XMLHttpRequest) { var n = window.XMLHttpRequest.prototype.open; window.XMLHttpRequest.prototype.open = function () { this.addEventListener("error", (function (e) { console.log("REPORTER: XML Req error:", e), t(e) })); for (var e = arguments.length, o = new Array(e), r = 0; r < e; r++)o[r] = arguments[r]; return n.apply(this, o) } } } else console.warn("Library only works on client environments. Make sure window is available.") } function r(e) { "undefined" != typeof window && (window.uptimeSentinelProjectId = e, n(), console.log("Sentinel initialized!: "), t({ foo: "bar" })) } return e.r(o), e.d(o, { initialize: () => n, intializeSentinel: () => r }), window.intializeSentinel = r, o })()));